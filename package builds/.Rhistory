renam.hor<-function(name.list,name)
{soilmerge$Horizon[soilmerge$Horizon %in% name.list]=name
return(soilmerge$Horizon)}
for(i in 1:length(hor.bins))
{
soilmerge$Horizon<-renam.hor(names.list[[i]],hor.bins[i])
}
soilmerge$Horizon<-factor(soilmerge$Horizon)
l99.2=soilmerge[soilmerge$Lake=='1_99_2',]
soilmerge$gC.gS=soilmerge$X.C/100
soilmerge$gC=soilmerge$dry.wt..g.*soilmerge$gC.gS
soilmerge$SiteHorizonLakeRep=paste(soilmerge$Site,soilmerge$Horizon,soilmerge$Lake,soilmerge$Rep,sep='_')
soilmerge.layer.sums<-xtabs(soilmerge$gC~soilmerge$SiteHorizonLakeRep)
soilmerge.layer.sums<-data.frame(SiteHorizonLakeRep=as.character(names(soilmerge.layer.sums)),layer.sums=c(soilmerge.layer.sums))
soilmerge.layer.sums$SiteHorizonLakeRep=as.character(soilmerge.layer.sums$SiteHorizonLakeRep)
shlr=as.character(soilmerge.layer.sums$SiteHorizonLakeRep)
soilmerge.layer.sums$Site<-sapply(soilmerge.layer.sums$SiteHorizonLakeRep,function(x) strsplit(x,split='_')[[1]][1])
soilmerge.layer.sums$Horizon<-sapply(soilmerge.layer.sums$SiteHorizonLakeRep,function(x) strsplit(x,split='_')[[1]][2])
soilmerge.layer.sums$Lake<-sapply(soilmerge.layer.sums$SiteHorizonLakeRep,function(x) paste(strsplit(x,split='_')[[1]][3:5],collapse='_'))
soilmerge.layer.sums$Rep<-sapply(soilmerge.layer.sums$SiteHorizonLakeRep,function(x) strsplit(x,split='_')[[1]][6])
soilmerge.layer.sums<-soilmerge.layer.sums[!duplicated(soilmerge.layer.sums$SiteHorizonLakeRep),]
core.area=pi*(2.4^2)/2
soilmerge.layer.sums$gc.m2=soilmerge.layer.sums$layer.sums*(10000/core.area)
lake992.layer.sums=soilmerge.layer.sums[soilmerge.layer.sums$Lake=='1_99_2',]
l992.soilc.tab=tapply(lake992.layer.sums$gc.m2,list(lake992.layer.sums$Site,lake992.layer.sums$Horizon,lake992.layer.sums$Rep),median)
l992.soilc.tab[is.na(l992.soilc.tab)]=0
l992.soilc.tab=apply(l992.soilc.tab,c(1,2),mean)
#still need to correct mineral layer for true depth- to 1.8 m or whatever.
tapply(soilmerge.layer.sums$gc.m2,list(soilmerge.layer.sums$Site,soilmerge.layer.sums$Horizon),median)
min.merge=soilmerge[soilmerge$Horizon=='A',]
min.merge$gC.1m=min.merge$gC*(100/min.merge$layer.width)
min.merge$gC.1m=min.merge$gC.1m*(10000/core.area)
tapply(min.merge$gC.1m,list(min.merge$Site),median)
head(soilmerge)
table(soilmerge$Lake)
setwd('~/')
setwd('~/../Desktop/')
soil1<-read.csv('YRB2010-2012_grand summary sheet_063015.csv')
setwd('~/')
soil2<-read.csv('YRB11_soil mass_July sampling_reduced.csv')
head(soil2)
head(soil1)
names(soil2)
names(soil1)
soil1<-read.csv('YRB2010-2012_grand summary sheet_063015.csv',header=T)
soil1<-read.csv('YRB2010-2012_grand summary sheet_063015.csv',header=T,skip = 1)
head(soil1)
table(soil1$Lake)
table(soil2$LAKE)
soil1<-read.csv('YRB2010-2012_grand summary sheet_063015.csv',header=T)
head(soil1)
table(soil1$Lake)
table(soil2)
table(soil2$LAKE)
setwd('~/')
inc.2012<-read.csv('YRB2012_incubation mass sheet.csv')
grand.summary<-read.csv('YRB2010-2012_grand summary sheet_063015.csv')
names(grand.summary)
table(grand.summary$Lake)
table(inc.2012)
table(inc.2012$Lake)
head(grand.summary)[1:3]
head(inc.2012)[1:3]
head(grand.summary)[1:5]
head(grand.summary)[1:6]
head(inc.2012)[1:6]
table(inc.2012$Horizon)
table(grand.summary$Horizon)
grand.summary$Horizon[grep('M',grand.summary$Horizon)]='Mineral'
grand.summary<-read.csv('YRB2010-2012_grand summary sheet_063015.csv',stringsAsFactors = F)
inc.2012<-read.csv('YRB2012_incubation mass sheet.csv',stringsAsFactors = F)
table(grand.summary$Lake)
table(inc.2012$Lake)
head(grand.summary)[1:6]
head(inc.2012)[1:6]
grand.summary$Horizon[grep('M',grand.summary$Horizon)]='mineral'
grand.summary$Horizon[grep('O',grand.summary$Horizon)]='organic'
table(grand.summary$Vegetation)
table(inc.2012$Vegetation.type)
inc.2012$Vegetation.type<-toupper(inc.2012$Vegetation.type)
inc.2012$lakerepveghor=paste(inc.2012$Lake,inc.2012$Field.rep,inc.2012$Vegetation.type,inc.2012$Horizon)
grand.sumary$lakerepveghor=paste(grand.summary$Lake,grand.summary$Rep,grand.summary$Vegetation,grand.summary$Horizon)
inc.2012$lakerepveghor=paste0(inc.2012$Lake,inc.2012$Field.rep,inc.2012$Vegetation.type,inc.2012$Horizon)
grand.summary$lakerepveghor=paste0(grand.summary$Lake,grand.summary$Rep,grand.summary$Vegetation,grand.summary$Horizon)
grand.summary$lakerepveghor
head(grand.summary)
table(grand.summary$Lake)
table(inc.2012$Lake)
grand.summary$Lake<-ifelse(grand.summary$Lake=='1272','1_27_2',grand.summary$Lake)
inc.2012$Vegetation.type<-toupper(inc.2012$Vegetation.type)
inc.2012$lakerepveghor=paste0(inc.2012$Lake,inc.2012$Field.rep,inc.2012$Vegetation.type,inc.2012$Horizon)
grand.summary$lakerepveghor=paste0(grand.summary$Lake,grand.summary$Rep,grand.summary$Vegetation,grand.summary$Horizon)
match.ind=match(inc.2012$lakerepveghor,grand.summary$lakerepveghor)
dim(inc.2012)
dim(grand.summary)
match.ind
inc.2012$lakerepveghor
grand.summary$lakerepveghor
inc.2012$lakerepveghor<-gsub(' ','',inc.2012$lakerepveghor)
inc.2012$lakerepveghor
tail(inc.2012)
match.ind=match(inc.2012$lakerepveghor,grand.summary$lakerepveghor)
match.ind
match.ind=match(grand.summary$lakerepveghor,inc.2012$lakerepveghor)
match.ind
grand.summary$Hor.thick=inc.2012$O.M.length[match.ind]
grand.summary2<-grand.summary[!is.na(grand.summary$Hor.thick),]
grand.summary2
hist(grand.summary$C..wt..)
grand.summary2$C.kg.m2=grand.summary2$BD..g.cm3.*grand.summary2$Hor.thick*grand.summary2$C..wt../100
names(grand.summary2)
head(grand.summary2)
grand.summary2<-subset(grand.summary2,select=c('Lake','Vegetation','Rep','Horizon','Hor.thick','BD..g.cm3.','C..wt..','C.kg.m2'))
head(grand.summary2)
grand.summary2
write.csv(grand.summary2,'yrb_terr_carbonstocks_2012lakes.csv')
file2<-read.csv('Soildepths_BD_pC_2012_version2.csv')
hab.m.o=tapply(file2$C.m2,list(file2$VEG,file2$HOR),function(x) mean(na.omit(x)))
hab.m.o
file2$HOR<-ifelse(file2$HOR == 'M','M','O')
file2$HOR
hab.m.o=tapply(file2$C.m2,list(file2$VEG,file2$HOR),function(x) mean(na.omit(x)))
file2$C.m2
file2<-read.csv('Soildepths_BD_pC_2012_version2.csv',stringsAsFactors = F)
file2$HOR<-ifelse(file2$HOR == 'M','M','O')
file2$C.m2<-as.numeric(file2$C.m2)
file2$HOR<-ifelse(file2$HOR == 'M','M','O')
hab.m.o=tapply(file2$C.m2,list(file2$VEG,file2$HOR),function(x) mean(na.omit(x)))
hab.m.o
barplot(hab.m.o,legend=T)
barplot(hab.m.o,legend=T,beside=T)
hab.m.o<-t(hab.m.o)
barplot(hab.m.o,legend=T,beside=T)
hab.m.o<-t(hab.m.o)[,c(2,3,1)]
hab.m.o=tapply(file2$C.m2,list(file2$VEG,file2$HOR),function(x) mean(na.omit(x)))
hab.m.o<-t(hab.m.o)
hab.m.o=tapply(file2$C.m2,list(file2$VEG,file2$HOR),function(x) mean(na.omit(x)))
hab.m.o<-t(hab.m.o)[,c(2,3,1)]
barplot(hab.m.o,legend=T,beside=T)
hab.m.o2<-tapply(grand.summary2$C.kg.m2,list(grand.summary2$Vegetation,grand.summary2$Horizon),function(x) mean(na.omit(x)))
hab.m.o2
hab.m.o2<-t(hab.m.o2)[,c(3,2,4,1)]
barplot(hab.m.o2)
barplot(hab.m.o2,beside=T,legend=T)
table(hab.m.o2)
table(grand.summary2$Lake)
setwd('~/')
grand.summary<-read.csv('YRB2010-2012_grand summary sheet_063015.csv',stringsAsFactors = F)
inc.2012<-read.csv('YRB2012_incubation mass sheet.csv',stringsAsFactors = F)
table(grand.summary$Lake)
table(inc.2012$Lake)
head(grand.summary)[1:6]
head(inc.2012)[1:6]
grand.summary$Horizon[grep('M',grand.summary$Horizon)]='mineral'
grand.summary$Horizon[grep('O',grand.summary$Horizon)]='organic'
grand.summary$Lake<-ifelse(grand.summary$Lake=='1272','1_27_2',grand.summary$Lake)
inc.2012$Vegetation.type<-toupper(inc.2012$Vegetation.type)
inc.2012$lakerepveghor=paste0(inc.2012$Lake,inc.2012$Field.rep,inc.2012$Vegetation.type,inc.2012$Horizon)
inc.2012$lakerepveghor<-gsub(' ','',inc.2012$lakerepveghor)
grand.summary$lakerepveghor=paste0(grand.summary$Lake,grand.summary$Rep,grand.summary$Vegetation,grand.summary$Horizon)
match.ind=match(grand.summary$lakerepveghor,inc.2012$lakerepveghor)
grand.summary$Hor.thick=inc.2012$O.M.length[match.ind]
grand.summary2<-grand.summary[!is.na(grand.summary$Hor.thick),]
grand.summary2$C.kg.m2=grand.summary2$BD..g.cm3.*grand.summary2$Hor.thick*grand.summary2$C..wt../100
grand.summary2<-subset(grand.summary2,select=c('Lake','Vegetation','Rep','Horizon','Hor.thick','BD..g.cm3.','C..wt..','C.kg.m2'))
head(grand.summary)
head(grand.summary2)
hist(grandsummary2$C..wt..)
hist(grand.summary2$C..wt..)
hist(grand.summary$C..wt..)
hist(file2$C.)
file2[file2$C.>100,]
hist(grand.summary$C..wt..[grand.summary$Lake=='1_63_5' & grand.summary$Vegetation=='FOREST',])
hist(grand.summary$C..wt..[grand.summary$Lake=='1_63_5' & grand.summary$Vegetation=='FOREST'])
(grand.summary$C..wt..[grand.summary$Lake=='1_63_5' & grand.summary$Vegetation=='FOREST'])
(grand.summary$C..wt..[grand.summary$Lake=='1-63-5' & grand.summary$Vegetation=='FOREST'])
grand.summary[grand.summary$Lake=='1_63_5' & grand.summary$Vegetation=='FOREST',]
grand.summary[grand.summary$Lake=='1-63-5' & grand.summary$Vegetation=='FOREST',]
grep('C..',names(grand.summary))
grep('C..wt..',names(grand.summary))
grep('Rep',names(grand.summary))
grand.summary[grand.summary$Lake=='1-63-5' & grand.summary$Vegetation=='FOREST',c(4,33)]
names(grand.summary)
grep('Hor',names(grand.summary))
grand.summary[grand.summary$Lake=='1-63-5' & grand.summary$Vegetation=='FOREST',c(4,33,60)]
grand.summary[grand.summary$Lake=='1-63-5' & grand.summary$Vegetation=='FOREST',c(4,33,6)]
grep('BD'),names(grand.summary))
grep('BD',names(grand.summary))
grand.summary[grand.summary$Lake=='1-63-5' & grand.summary$Vegetation=='FOREST',c(4,33,6,54)]
grand.summary[grand.summary$Lake=='4362' & grand.summary$Vegetation=='FOREST',c(4,33,6,54)]
setwd('~/')
soilstuff<-read.csv('Soildepths_BD_pC_Cm2.csv')
temclass<-read.csv('YRB/lake_class_tem.csv')
head(temclass)
soilstuff<-read.csv('Soildepths_BD_pC_Cm2.csv',stringsAsFactors = F)
temclass<-read.csv('YRB/lake_class_tem.csv',stringsAsFactors = F)
head(soilstuff)
head(temclass)
table(temclass$LakeID)
table(soilstuff$LAKE)
soilstuff$LAKE<-gsub('-','_',soilstuff$LAKE)
names(temclass)[1]='LAKE'
soilstuff.lakeclass<-merge(soilstuff,temclass)
dim(soilstuff.lakeclass)
head(soilstuff.lakeclass)
means<-tapply(soilstuff.lakeclass$C.m2,list(soilstuff.lakeclass$Category,soilstuff.lakeclass$VEG,soilstuff.lakeclass$HOR),function(x) mean(na.omit(x)))
soilstuff<-read.csv('Soildepths_BD_pC_Cm2.csv',stringsAsFactors = F)
temclass<-read.csv('YRB/lake_class_tem.csv',stringsAsFactors = F)
names(temclass)[1]='LAKE'
soilstuff$LAKE<-gsub('-','_',soilstuff$LAKE)
soilstuff.lakeclass<-merge(soilstuff,temclass)
soilstuff.lakeclass$C.m2<-as.numeric(soilstuff.lakeclass$C.m2)
means<-tapply(soilstuff.lakeclass$C.m2,list(soilstuff.lakeclass$Category,soilstuff.lakeclass$VEG,soilstuff.lakeclass$HOR),function(x) mean(na.omit(x)))
means
table(soilstuff.lakeclass$HOR)
soilstuff.lakeclass$HOR<-ifelse(soilstuff.lakeclass$HOR %in% c('M','mineral'),'M','O')
means<-tapply(soilstuff.lakeclass$C.m2,list(soilstuff.lakeclass$Category,soilstuff.lakeclass$VEG,soilstuff.lakeclass$HOR),function(x) mean(na.omit(x)))
means
barplot(t(means[,,2]),legend=T,beside=T)
soilstuff.lakeclass$Category<-toupper(soilstuff.lakeclass$Category)
means<-tapply(soilstuff.lakeclass$C.m2,list(soilstuff.lakeclass$Category,soilstuff.lakeclass$VEG,soilstuff.lakeclass$HOR),function(x) mean(na.omit(x)))
barplot(t(means[,,2]),legend=T,beside=T)
table(soilstuff$LAKE,soilstuff$CAtegory)
table(soilstuff$LAKE,soilstuff$Category)
table(soilstuff.lakeclass$LAKE,soilstuff.lakeclass$Category)
soilstuff.lakeclass$shrink<-ifelse(soilstuff.lakeclass$Category %in% c('Stable','INCREASING'),0,1)
soilstuff.lakeclass$shrink<-ifelse(soilstuff.lakeclass$Category %in% c('DRY'),1,0)
soilstuff.lakeclass
table(soilstuff.lakeclass$LAKE,soilstuff.lakeclass$shrink)
table(soilstuff$LAKE)
dim(soilstuff)
dim(soilstuff.lakeclass)
write.csv(soilstuff.lakeclass'Soildepths_BD_pC_Cm2.csv')
write.csv(soilstuff.lakeclass,'Soildepths_BD_pC_Cm2.csv')
soilstuff.lakeclass$VEG[soilstuff.lakeclass$VEG=='SEDGE']='GRAMMINOID'
means<-tapply(soilstuff.lakeclass$C.m2,list(soilstuff.lakeclass$Category,soilstuff.lakeclass$VEG,soilstuff.lakeclass$HOR),function(x) mean(na.omit(x)))
soilstuff.lakeclass$shrink<-ifelse(soilstuff.lakeclass$Category %in% c('DRY'),1,0)
barplot(t(means[,,2]),legend=T,beside=T)
write.csv(soilstuff.lakeclass,'Soildepths_BD_pC_Cm2.csv')
means<-tapply(soilstuff.lakeclass$C.m2,list(soilstuff.lakeclass$shrink,soilstuff.lakeclass$VEG,soilstuff.lakeclass$HOR),function(x) mean(na.omit(x)))
barplot(t(means[,,2]),legend=T,beside=T)
###house mortgage finance function
interest<-function(P,i,n)
{
M=P*(i*(1+i)^n)/((1+i)^(n-1))
return(M)
}
price=260000
annual=6.5
years=15
down=.30*price
i=annual/100/12
n=years*12
principal=price-down
int<-interest(principal,i,n)
monthly=int+principal/n
total.int=int*n
total=monthly*n
scenario=data.frame(price,down,annual,years,principal,int,monthly,total.int,total)
scenario
price=176000
annual=5.5
years=10
down=.30*price
i=annual/100/12
n=years*12
principal=price-down
int<-interest(principal,i,n)
monthly=int+principal/n
total.int=int*n
total=monthly*n
scenario=data.frame(price,down,annual,years,principal,int,monthly,total.int,total)
scenario
down=.25*price
i=annual/100/12
n=years*12
principal=price-down
int<-interest(principal,i,n)
monthly=int+principal/n
total.int=int*n
total=monthly*n
scenario=data.frame(price,down,annual,years,principal,int,monthly,total.int,total)
scenario
607*12
607*12*2.5
176000+18210
7284+176000
source('~/algaebase_query_v2_nn (1).r', echo=TRUE)
algae.search('Anabaena',long=T)
algae.search('Anabaena','flosaquae',long=T)
algae.search=function(genus,species='',long=F)
{
#if only a genus is entered, or species is blank, it will execute a genus search.
status=0 #this variable is used to flag search results based on whether a single page or a table of results is returned by the website.
species=ifelse(species %in% c('sp.','spp.','sp','spp'),'',species)
URL=paste('www.algaebase.org/search/?species=',
genus,'%20',
species,sep='')
groups = c('Empire','Kingdom','Phylum','Class','Order','Family')
if(is.na(genus)|genus=='NA'|genus=='NaN'|genus=='na'|genus=='')
{
res.df=data.frame(genus=NA,species=NA,exact.match=0,synonyms=NA,orig.name=paste(genus,species),match.name=NA)
if(long)
{
res.df$Empire=res.df$Kingdom=res.df$Phylum=res.df$Class=res.df$Order=res.df$Family=NA
}
return(res.df)
}
url.get=GET(URL)
parsed=htmlParse(url.get)
plain.text <- xpathSApply(parsed, "//p", xmlValue)
status=plain.text[grep('Status',plain.text)]
if(length(status)==0)
{
status=0
}else if(length(grep("This name is of an entity that is currently accepted taxonomically",status))==1) #single page result with exact match
{
status=1
}else if(length(grep('This name is currently regarded as a synonym of ',status))==1) #single page result. entered name is synonym
{
match.name=status
status=2
}else
{
status=0
}
if(status==1)
{
res.genus=genus
res.species=species
exact.match=1
orig.name=paste(genus,species)
match.name=paste(genus,species)
res.synonyms=plain.text[grep('Synonym',plain.text)]
res.synonyms=ifelse(grepl('Homotypic',res.synonyms,fixed=T),
gsub('Homotypic Synonym(s)','',res.synonyms,fixed=T),
gsub('Synonym(s)','',res.synonyms,fixed=T))
res.synonyms=gsub('Heterotypic ','',res.synonyms,fixed=T)
res.synonyms[grepl('No synonym',res.synonyms,fixed=T)]=''
res.df=data.frame(genus=res.genus,species=res.species,exact.match=exact.match,synonyms=paste(res.synonyms,collapse=','),orig.name=orig.name,match.name=match.name)
if(long)
{
details.parsed=read_html(url.get)
classification.node<-html_nodes(details.parsed,xpath="//p")[[1]]
taxa.levels = html_text(html_nodes(classification.node,"i"))
taxa=	html_text(html_nodes(classification.node,"a"))
df=data.frame(rbind(taxa))
names(df)=taxa.levels
df=df[,match(groups,names(df))] #make sure there is a consistent set of names
res.df<-cbind(res.df,df)
}
return(res.df)
}else if(status==2)###single page match, but submitted name is a synonym of an accepted name
{
match.name=gsub('Status of nameThis name is currently regarded as a synonym of ','',match.name)
res.genus=strsplit(match.name,split=' ')[[1]][1]
res.species=strsplit(match.name,split=' ')[[1]][2]
exact.match=0
orig.name=paste(genus,species)
match.name=paste(res.genus,res.species)
res.synonyms=orig.name
res.df=data.frame(genus=res.genus,species=res.species,exact.match=exact.match,synonyms=paste(res.synonyms,collapse=','),orig.name=orig.name,match.name=match.name)
if(long)
{
details.parsed=read_html(url.get)
classification.node<-html_nodes(details.parsed,xpath="//p")[[1]]
taxa.levels = html_text(html_nodes(classification.node,"i"))
taxa=	html_text(html_nodes(classification.node,"a"))
df=data.frame(rbind(taxa))
names(df)=taxa.levels
df=df[,match(groups,names(df))] #make sure there is a consistent set of names
res.df<-cbind(res.df,df)
}
return(res.df)
}
tabs=readHTMLTable(parsed)
if(length(tabs)==0)
{
res.df=data.frame(genus=NA,species=NA,exact.match=0,synonyms=NA,orig.name=paste(genus,species),match.name=NA)
if(long)
{
res.df$Empire=res.df$Kingdom=res.df$Phylum=res.df$Class=res.df$Order=res.df$Family=NA
}
return(res.df)
}
results.tab=data.frame(tabs[[1]],stringsAsFactors = F)
genus.match=grepl(genus,results.tab[[1]])
if(sum(genus.match)==0)
{
res.df=data.frame(genus=NA,species=NA,exact.match=0,synonyms=NA,orig.name=paste(genus,species),match.name=NA)
if(long)
{
res.df$Empire=res.df$Kingdom=res.df$Phylum=res.df$Class=res.df$Order=res.df$Family=NA
}
return(res.df)
}
results.tab<-results.tab[genus.match,]
if(dim(results.tab)[1]==0)
{
res.df=data.frame(genus=NA,species=NA,exact.match=0,synonyms=NA,orig.name=paste(genus,species),match.name=NA)
if(long)
{
res.df$Empire=res.df$Kingdom=res.df$Phylum=res.df$Class=res.df$Order=res.df$Family=NA
}
return(res.df)
};
colnames(results.tab)[2]='Current name if different'
results.tab2=results.tab
if(length(grep('Unchecked',as.character(results.tab$Name)))>0)
{
results.tab2=results.tab[-grep('Unchecked',results.tab$Name),]
}
res.names=as.character(results.tab2$Name)
if(species=='')
{
res.names=sapply(res.names,function(x){
return(strsplit(x,split=' ')[[1]][1])
})
}else
{
res.names=sapply(res.names,function(x){return(paste(
strsplit(x,split=' ')[[1]][1],
strsplit(x,split=' ')[[1]][2]))
})
}
sub.name=ifelse(species=='',genus,paste(genus,species))
match.name=bestmatch(sub.name,unique(res.names))
match.rows=res.names %in% match.name
match.tab=results.tab2[match.rows,]
res.synonyms=paste(unique(match.tab[,2]),collapse=',')
if(species==''){res.synonyms=''}
exact.match=ifelse(match.name==sub.name,1,0)
res.genus=ifelse(match.name=='multiplePartialMatch','',strsplit(match.name,split=' ')[[1]][1])
res.species=ifelse(match.name=='multiplePartialMatch','',strsplit(match.name,split=' ')[[1]][2])
#check if there are any verified names.
res.df=data.frame(genus=res.genus,species=res.species,exact.match=exact.match,synonyms=res.synonyms,orig.name=sub.name,match.name=match.name)
if(long)
{
if(status==1)
{
details.parsed=read_html(url.get)
}else
{
links.parsed=xpathSApply(parsed,"//a/@href")
links.parsed<-links.parsed[grep('results',links.parsed)]
links.parsed<-links.parsed[seq(1,length(links.parsed),by=2)]
links.parsed=links.parsed[genus.match]
good.link=links.parsed[grep(match.name,results.tab$Name)[1]]
good.link=paste('www.algaebase.org',good.link,sep='')
details=GET(good.link)
details.parsed=read_html(details)
}
classification.node<-html_nodes(details.parsed,xpath="//p")[[1]]
taxa.levels = html_text(html_nodes(classification.node,"i"))
taxa=	html_text(html_nodes(classification.node,"a"))
df=data.frame(rbind(taxa))
names(df)=taxa.levels
df=df[,match(groups,names(df))] #make sure there is a consistent set of names
res.df<-cbind(res.df,df)
}
if(is.na(species) | is.null(species) | species %in% c('','sp','sp.','spp.'))
{
res.df$synonyms=res.df$species=''
}
return(res.df)
}
algae.search('Volvox','globulus',long=T)
algae.search('Volvox','globulator',long=T)
algae.search('Volvox','globulator',)
algae.search('Volvox')
algae.search('Volvox','globator')
algae.search('Volvox','globator',long=T)
algae.search('Volvox','globat',long=T)
# set directory to the package development folder
setwd("~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
roxygenize('.')
setwd('algaeClassify')
roxygenize('.')
# setwd('~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/package builds/')# use_data(library_MFG, pkg = thePackage, internal = TRUE, overwrite = TRUE)
#
# load('sppMFG.rda')
setwd('data/')
load('species.mfg.library.rda')
species.mfg.library[species.mfg.library$genus=='Amphora']
species.mfg.library[species.mfg.library$genus=='Amphora',]
use_data(species.mfg.library, pkg = thePackage, overwrite = TRUE)
setwd('..')
use_data(species.mfg.library, pkg ='.', overwrite = TRUE)
thePackage='algaeClassify'
use_data(species.mfg.library, pkg = thePackage, overwrite = TRUE)
use_data(species.mfg.library, overwrite = TRUE)
# constructs binaries
library(devtools);
# creates bundle to submit to CRAN (*.tar.zip file found in development folder)
build(thePackage, manual = FALSE)
setwd('..')
# creates bundle to submit to CRAN (*.tar.zip file found in development folder)
build(thePackage, manual = FALSE)
# error checks prior to submission (all errors and warnings need to be addressed)
check(thePackage)
ls
ls
library(devtools)
species_to_mfg("Amphora","",flag=2)
install_github(repo = "vppatil/GEISHA_phytoplankton",ref="working")
install_github(repo = "vppatil/GEISHA_phytoplankton/package builds/algaeClassify",ref="working")
library(algaeClassify)
